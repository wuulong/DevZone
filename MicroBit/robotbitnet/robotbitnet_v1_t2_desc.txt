#RobotBitNet
#Features:
#   multi-nodes radio communication with re-transmition
#   current ids show on LEDs (sid: brighter,did: darker, mid: brightest)
#   random tx rate test
#   auto select lowest non-used sid
#   sid collision avoidence
#   APP version 1, support type 1
#Usage:
#   Button-A: start, Button-B: enable/disable master
#   print format: sid, mid
#   limitation: max nodes = 20, due to reserved 20 LEDs to show device id
#LICENSE: MIT
#Author: WuLung Hsu, wuulong@gmail.com
#Document: https://paper.dropbox.com/doc/MbitBot--AWWwIfCnEicRuc7gSfO_tmcJAg-DG5SSj5zQhBv1CoAgDtAG

#protocol:
#   (1,20) random select ID as device ID
#   device id 0 used for broadcast
#   data format: TID:RID:1,type,pertype_value
#   ACK format: value as ~
#   broadcast msg "sid:0:0" + type1 every second
#   power-up receive 1.5 second to select new device id
#   auto invalid leaving node
#   LED index (x*5+y) as sid-1
#   if sid collision, will change new sid

# Development history
# robotbitnet_v1_t1.py
# robotbitnet_v1_t2.py
#   non-class compatible version with v1


#code section: the following code always be replaced by code file, duplicate here for reference
from microbit import *
import radio as ro
import utime as ut
import random as rn
from microbit import display as di
#from microbit import sleep,button_a,button_b
#from microbit import compass as cms


class Comm():
    __slots__ = ['sid', 'ack','txc','rxc','uids','uidsn','ackd','ms','cs','mid']
    def __init__(self):
        self.sid = 0
        self.ack = "~"
        self.txc = 0#tx_cnt
        self.rxc = 0#rx_cnt
        self.uids = [] #used_ids
        self.uidsn = [] #used_ids_next
        self.ackd = False#ack_received
        self.ms = 0#master_status
        self.cs = 0#cmd_status
        self.mid = 0#master id
        ro.config(queue=6,address=0x75626972,channel=4,data_rate=ro.RATE_1MBIT)
        ro.on()
        sleep(100)

    def tx(self,did,v):
        self.txc += 1
        txt = "%i:%i:%s" %(self.sid,did,str(v))
        ro.send(txt)
        self.leds(1,self.txc)
    def txp(self,did,ty,v):
        if ty==1:
            txt = "1,1,%i,%i" %(self.ms,self.cs)
        if ty==2:
            #str1 = "%i,%i,%i,%i" %(cms.get_x(),cms.get_y(),cms.get_z(),cms.get_field_strength())
            #str2="%i,%i,%i" %(accelerometer.get_values())
            str1=""
            str2=""
            txt = "1,2,%i,%i,%s,%s" %(self.ms,self.cs,str1,str2)
        if ty==20:
            txt = "1,20,%s" %(v)
        self.tx(did,txt)

    def gnid(self,used_ids):#get_new_id
        for id in range(1,20):
            if not id in used_ids:
                break
        return id

    def wait_start(self):
        while True:
            if button_a.was_pressed():
                di.show("F")
                self.uids = self.find_used_ids()
                self.sid = self.gnid(self.uids)
                #self.show_id()
                break
    def show_id(self):
        di.clear()
        sid = self.sid - 1

        for id in self.uids:
            if id>0:
                uid = id - 1
                di.set_pixel(uid%5,int(uid/5),2)
        di.set_pixel(sid%5,int(sid/5),7)
        mid = self.mid
        if mid>0:
            uid = mid-1
            di.set_pixel(uid%5,int(uid/5),9)


    def find_used_ids(self):
        used_ids=[]
        t_s = ut.ticks_us()

        while True: # start current measurement
            t_now = ut.ticks_us()
            t_use = ut.ticks_diff(t_now,t_s)
            if 1500000 - t_use <0: # 1.5s
                #di.show("W")
                break
            incoming = ro.receive()
            if incoming:
                items = incoming.split(":")
                if len(items)==3:
                    sid = int(items[0])
                    if not (sid in used_ids):
                        used_ids.append(sid)
        return used_ids

    def leds(self,part,value):#pixel_debug
        if part==1: # tx
            value = value *3 % 10
            di.set_pixel(4, 4, value)
        elif part==2:#master
            di.set_pixel(3, 4, value)
        else: #3 Rx
            value = value % 30
            for i in range(3):
                if value >=9:
                    di.set_pixel(i, 4, 9)
                elif value<0:
                    di.set_pixel(i, 4, 0)
                else:
                    di.set_pixel(i, 4, value)
                value -=10
    def leds_br(self):
        if self.ms==1:
            self.leds(2,9)
        elif self.mid>0:
            self.leds(2,5)
        else:
            self.leds(2,0)

    def bi_tran(self):
        cur_num_tx = 0
        self.wait_start()
        while True:
            self.rxc = 0
            self.txc = 0
            tp = 1 #test_period s
            t_tick = int(tp * 1000000)

            t_s = ut.ticks_us()
            t_l = t_s

            #broadcast device exist every test period
            self.txp(0,1,"")
            self.show_id()
            self.leds_br()


            # rate target hz
            rate_target = rn.randint(1, 100)
            send_tick = int(t_tick/rate_target)


            while True: # start current measurement
                t_now = ut.ticks_us()
                t_use = ut.ticks_diff(t_now,t_s)
                if t_tick - t_use <0: # 10s
                    self.uids = self.uidsn
                    #self.show_id()
                    self.uidsn = []
                    break

                t_last = ut.ticks_diff(t_now,t_l)
                if send_tick - t_last <0: # should send
                    t_l = t_now
                    if self.ackd:
                        cur_num_tx = cur_num_tx+1
                    self.ackd = False
                    if len(self.uids)>0:
                        index = rn.randint(0, len(self.uids)-1)
                        did = self.uids[index]
                        self.txp(did,20,cur_num_tx)


                incoming = ro.receive()
                if incoming:
                    self.rxc+=1
                    items = incoming.split(":")
                    if len(items)==3:

                        sid,did,value = items
                        sid = int(sid)
                        did = int(did)
                        if not sid in self.uids:
                            self.uids.append(sid)
                            #self.show_id()

                        if not sid in self.uidsn:
                            self.uidsn.append(sid)

                        if sid == self.sid: # sid collision
                            self.sid = self.gnid(self.uids)
                            #self.show_id()


                        if did == self.sid:
                            if value == self.ack:
                                self.ackd = True
                            else:
                                self.tx(sid,self.ack)
                        pvs = value.split(",")
                        if pvs[0]=="1":
                            if pvs[1]=="1" or pvs[1]=="2":
                                if pvs[2]=="1":
                                    self.mid = sid
                                if self.mid == sid and pvs[2]=="0":
                                    self.mid = 0
                        del pvs
                        del items

                    self.leds(0,self.rxc)
                if button_b.was_pressed():
                    self.ms^=1
                    if self.ms == 1:
                        self.mid=self.sid
                    else:
                        self.mid=0

            print("%i,%i" %(self.sid,self.mid))

comm = Comm()
comm.bi_tran()